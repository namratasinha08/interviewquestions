##Java,Exception handling,Exceptions

#P1
##EASY
###BC

1.What is the root class of all the Exception classes?

A.java.lang.Exceptions
B.java.lang.Throws
C.java.lang.RuntimeExceptions
D.java.lang.Throwable

Answer:D

#P1
##EASY
###BC

2. Which mechanism is used to handle the runtime errors?

A.Exception handling
B.Interfaces
C.Inheritance
D.Abstractions

Answer:A

#P1
##EASY
###BC

3.What are the derived classes of the Exception class?

A.FinallyException
B.ClassNotFoundException,IOException,SQLException, RuntimeException
C.TryExceptions,CatchException
D.ThrowableException

Answer:B

#P1
##EASY
###BC

4. Event that disrupts the normal flow of the program is called as _________

A.Exception
B.Compile-time error
C.Error
D.None of the above


Answer:A

#P1
##EASY
###BC

5. What are the derived classes of RuntimeException class?

A.ClassNotFoundException, IOException, SQLException, RuntimeException
B.ThrowableException
C.ArithmeticException, NumberFormatException, NullPointerException, IndexOutOfBoundsException
D.Compiletime Exception

Answer:C

#P1
##EASY
###BC

6.Which is the base class for StackOverflowError and Â VirtualMachineError classes?

A.ClassNotFoundException
B.Error
C.ArithmeticException
D.RunTimeException,

Answer:B

#P1
##EASY
###BC

7.What are the keywords that are used to handle exceptions?

A.public,private,protected
B.try,catch,finally,throw and throws
C.static,final,finalize
D.Runnable,Thread

Answer:B
Explanation:try,catch,finally,throw and throws used to handle exceptions in exception handling mechanism.

#P1
##EASY
###BC

8.Which block has to be followed after the try block?

A.catch or finally block.
B.throw
C.static
D.throws

Answer:A
Explanation:Try block needs to be followed with catch or finally block

#IGNORE
9.Why the rest of the code in the try block will not be executed?

A.whenever an exception is occurred in the try block the rest of the code will give the output.
B.whenever an exception is occurred in the try block the rest of the code will execute.
C.whenever an exception is occurred in the try block the rest of the code will not execute. 
D.whenever an exception is occurred in the try block the throws clause get executed.

Answer:C

#P1
##EASY
###BC

10.Can we have multiple catch blocks with the single try block?

A.yes.
B.no.
C.not recommended.
D.none of the above.

Answer:A
Explanation:We can have multiple catch blocks with the single try block.

#P1
##MEDIUM
###BC

11. Who handles the exception if it is not handled by the programmer?

A.Java Virtual Machine(JVM).
B.Java compiler
C.JRE.
D.Constructor.

Answer:A

#P2
##MEDIUM
###BC

12.What is the role of JVM in default Exception Handling mechanism?

A.shows a compile time error
B.Prints out the exception description, Prints the StackTrace,Causes the program to terminate.
C.Shows a runtime error
D.Garbage collection

Answer:B

#IGNORE
13.How the normal flow of the program is maintained in the exception handling mechanism?

A.If the programmer handles the exception.
B.Prints the StackTrace.
C.Causes the program to terminate.
D.Garbage collection.

Answer:A

#IGNORE
14.How catch block is executed in multiple catch blocks?

A.if the programmer handles the specific exception.
B.All the catch blocks must be ordered from most specific to most generic 
C.All the try blocks must be ordered.
D.using a garbage collector.

Answer:B

#P1
##EASY
###BC

15.What is a nested try block?

A.the try block inside another try block is called as nested try block.
B.catch inside try block
C.try inside catch block
D.try after catch block.

Answer:A


#IGNORE
16.When should we use nested try block?

A.in the catch block.
B.catch inside try block
C.A situation may arise where a part of  block of code may cause one error and the entire block of code itself may cause another error. In such cases, exception handlers have to be nested.
D.after catch block.

Answer:C

#IGNORE
17.When should we use nested try block?

A.in the catch block.
B.catch inside try block
C.A situation may arise where a part of  block of code may cause one error and the entire block of      code itself may cause another error. In such cases,exception handlers have to be nested.
D.after catch block.

Answer:C

#P1
##EASY
###BC
18. Select true statement about finally block

A.before the catch block.
B.finally block is always executed whether an exception is handled or not. Therefore, it contains all the necessary statements that need to be printed regardless of the exception occurs or not.The finally block follows the try-catch block.
C.a part of  block of code may cause one error and the entire block of code itself may cause another error. In such cases,finally block has to be used
D.after catch block.

Answer:B

#P1
##EASY
###BC

19.Predict the output of the following code.

public class trycatchexample1 {  
    public static void main(String[] args) {  
        try  
        {  
        int b=5/0;  
        }  
        catch(ArithmeticException e)  
        {  
            System.out.println(e);  
        }  
        System.out.println("Exception Occurred");  
    }  
      
}  

A.0
B.java.lang.ArithmeticException: / by zero
Exception Occurred
C.5
D.10

Answer:B


#P1
##EASY
###BC

20.Predict the output of the following code.

public class trycatchexample3 {  
    public static void main(String[] args) {  
        try  
        {  
        int c=25/0;  
        }  
        catch(ArithmeticException e)  
        {  
            System.out.println("A number cannot be divided  by zero");  
        }    
    }  
      
}  

A.25.
B.A number cannot be divided  by zero.
C.Exception occurred.
D.0.

Answer:B

#P2
##EASY
###BC

21.Predict the output of the following code.

public class trycatchexample4 {  
    public static void main(String[] args) {  
        try  
        {  
        int c[]=new int[10];  
        c[22]=50;
        }  
        catch(ArrayIndexOutOfBoundsException e)  
        {  
            System.out.println("Array index error");  
        }    
    }  
      
}  

A.Array index error
B.50
C.10
D.0.

Answer: A

#P2
##MEDIUM
###BC

22.Predict the output of the following code.

import java.io.*;
public class trycatchexample5 {  
    public static void main(String[] args) {  
        PrintWriter p;  
        try {  
            p = new PrintWriter("abc.txt");  
            p.println("Exception Occurred");  
            }  
        catch (FileNotFoundException e) {  
              
            System.out.println("The File location is not found");  
        }         
     
    }  
}  

A.The File location is not found
B.abc
C.Exception Occurred
D.Compile time error

Answer:A

#P2
##MEDIUM
###BC

23.Predict the output of the following code.

public class nestedtryblock1{    
 public static void main(String args[]){    
  try{    
    try{    
     System.out.println("Divide by zero error");    
     int b =50/0;    
   }    
    catch(ArithmeticException e){  
      System.out.println(e);  
    }    
    try{    
    int b[]=new int[10];    
     b[20]=40;    
     }  
    catch(ArrayIndexOutOfBoundsException e){  
       System.out.println(e);  
    }      
    System.out.println("other statement");    
  }  
  catch(Exception e){  
    System.out.println("handled the exception (outer catch)");  
  }    
    
  System.out.println("normal flow..");    
 }    
}  

A.other statement.
B.normal flow
C.Divide by zero error,Index 10 out of bounds for length 10
D.40.

Answer:C

#P1
##MEDIUM
###BC

24.Predict the output of the following code.

class finallyblock1 {    
        public static void main(String args[]){    
             try{    
                     int data=50/10;    
                     System.out.println(data);    
                 }    
                 catch(ArithmeticException e){  
	                        System.out.println(e);  
	                }    
                    finally {  
                                	System.out.println("finally block is executed");  
	                        }     
                        }    
                }      

A.5 finally block is executed
B.Exception occurred
C.0
D.none of the above.

Answer:A

#P1
##MEDIUM
###BC

25.Predict the output of the following code.

public class finallyblock2{    
      public static void main(String args[]){   
      try {    
        System.out.println("Inside try block");  
       int data=10/0;      
      }   
      catch(ArithmeticException e){  
        System.out.println("Exception handled");  
        System.out.println(e);  
      }   
      finally {  
        System.out.println("finally block is  executed");  
      }      
      }    
    }   

A.Inside try block,Exception handled
B.Exception occurred
C.finally block is executed
D.none of the above.

Answer: C

#P1
##EASY
###BC

26.Throw statement can be ___

A. defined inside catch block.
B. used to throw an exception explicitly
C. a part of  block of code may cause one error and the entire block of code itself may cause another      error. 
D. inside finally block.

Answer:B

#P1
##EASY
###BC

27.Which of the following is the correct syntax of throw statement?

A.block throw.
B.throw block
C.throw new exceptionclass("error message"); 
D.throw message.

Answer:C

#P2
##MEDIUM
###BC

28.Predict the output of the following code.

public class throw1 {   
    public static void verify(int age) {  
        if(age<18) {  
            throw new ArithmeticException("An individual is not eligible to vote");    
        }  
        else {  
            System.out.println("An individual is eligible to vote!!");  
        }  
    }  
    public static void main(String args[]){  
        verify(10);  
  }    
}    

A.Exception occurred
B.An individual is eligible to vote
C.An individual is not eligible to vote
D.10.

Answer:C

#P2
##MEDIUM
###MA

29.Predict the output of the following code.

import java.io.*;   
public class throw2 {   
    public static void method1() throws FileNotFoundException {  
        FileReader f = new FileReader("C:\Users\Revature\Desktop\xyz.txt");  
        BufferedReader br = new BufferedReader(f);  
  	 throw new FileNotFoundException();    
    }  
    public static void main(String args[]){  
        try  
        {  
            method1();  
        }   
        catch (FileNotFoundException e)   
        {  
            e.printStackTrace();  
        }  
  }    
}  

A.stacktraces found
B.java.io.FileNotFoundException
C.reads the contents of the file if the file xyz.txt exists
D.end of file.

Answer: B,C

#IGNORE
30.What is a throws statement?
    
A.stacktraces found
B.Throws keyword is used to declare an exception. It gives an information to the programmer that there may occur an exception.
C.reads the contents of the blocks
D.end of file.

Answer:B,C

Explanation:It provides information to the caller of the method about the exception.

#P2
##MEDIUM
###BC

31.Show me the syntax of throws statement.
    
A.throws exception_class_name
B.return_type method_name() throws exception_class_name{  
//method code  
} 
C.throws class_name
D.throws exception

Answer:B

#P1
##MEDIUM
###BC

32.Predict the output of the following code.

import java.io.*;  
class throws1{  
 void method1()throws IOException{  
  throw new IOException("IO Error");  
 }  
}  
public class throws2{  
   public static void main(String args[]){  
    try{  
    throws1 t=new throws1();  
     t.method1();  
    }
catch(Exception e){
System.out.println("exception handled");
	}     
  }  
}  

A.exception handled
B.IO Error
C.throw IO Error
D.throws IO Error

Answer: A

#P1
##MEDIUM
###BC

33.Predict the output of the following code.

public class Throw1{  
    public static void calsquare(int n) {  
        if (num < 1) {  
            throw new ArithmeticException("\n Number is negative, cannot calculate square");  
        }  
        else {  
            System.out.println("Square of " + n + " is " + (n*n));  
        }  
    }    
    public static void main(String[] args) {  
            Throw1 obj = new Throw1();  
            obj.calsquare(-2);  
    }  
}  
 
A.Square of 5 is 25
B.Square of -2 is -4
C.Number is negative, cannot calculate square
D.Square of 5 is 0

Answer:C

#P1
##MEDIUM
###BC

34.Predict the output of the following code.

public class Throws2 {   
    public static int divide(int x, int y) throws ArithmeticException { 
        int z = x / y;  
        return z;  
    }  
    public static void main(String[] args) {  
        Throws2 t = new Throws2();  
        try {  
            System.out.println(t.divide(50, 0));  
        }  
        catch (ArithmeticException e){  
            System.out.println("\n Number cannot be divided by 0");  
        }  
 
    }  
}  

A.Exception occurred
B.Number cannot be divided by 0
C.Number is negative
D.Number is positive

Answer:B

#IGNORE
35.final statement can be defined as___

A.final block.
B.final statement is used to throw an exception explicitly
C.final is the keyword and it is an access modifier which is used to apply restrictions on a class, method or variable.
D.in the finally block.

Answer:C
Explanation:final variable becomes constant and cannot be modified once it is declared.It cannot be overridden by sub class.final class cannot be inherited.It is executed only when we call it.

#IGNORE
36.finalize statement can be defined as

A.final block.
B.final statement is used to throw an exception explicitly
C.finalize is the method in Java which is used to perform clean up processing for the object which is garbage collected.
D.in the finally block.

Answer:C
Explanation:finalize() method is used with the objects.It performs the cleaning activities with respect to the object before its destruction.It is executed just before the object is destroyed.

#P2
##MEDIUM
###BC

37.Predict the output of the following code

 public class finally1{    
      public static void main(String args[]){   
      try {    
        System.out.println("Inside try block");  
       int data=5/0;    
       System.out.println(data);    
      }   
      catch (ArithmeticException e){  
        System.out.println("Exception handled");  
        System.out.println(e);  
      }   
      finally {  
        System.out.println("finally block is executed");  
      }     
      }    
    }  

A.final block.
B.final statement is used to throw an exception explicitly
C.Inside try block Exception handled / by zero finally block is executed.
D.in the finally block.

Answer:C

#P2
##MEDIUM
###BC

38.Predict the output of the following code

public class finalize1 {    
     public static void main(String[] args){     
        finalize1 obj = new finalize1();         
        System.out.println("Hashcode is: " + obj.hashCode());           
        obj = null;      
        System.gc();     
        System.out.println("garbage collection ended");     
    }     
    protected void finalize()     
    {     
        System.out.println("The finalize() method called");     
    }     
}    
 
A.Hashcode is:3456787673 garbage collection ended The finalize() method called
B.final statement is used to throw an exception explicitly
C.Inside try block Exception handled / by zero finally block is executed
D.in the finally block.

Answer:B


#IGNORE
39.Exception Propagation can be defined as ___

A.An exception is first thrown from the top of the stack and if it is not caught, it drops down the call stack to the previous method. If not caught there, the exception again drops down to the previous method, and so on until they are caught or until they reach the very bottom of the call stack. This is called exception propagation.
B.final statement is used to throw an exception explicitly
C.Inside try block Exception handled / by zero finally block is executed
D.in the finally block.

Answer:A

#P2
##COMPLEX
###BC

40.Predict the output of the following code.

class Propagation1{  
  void method1(){  
    int data=20/0;  
  }  
  void method2(){  
    method1();  
  }  
  void method3(){  
   try{  
    method2();  
   }catch(Exception e){
	System.out.println("exception handled");}  
  }  
  public static void main(String args[]){  
   Propagation1 obj=new Propagation1();  
   obj.method3();  
   System.out.println("normal flow...");  
  }  
}  

A.garbage collection ended
B.final statement is used to throw an exception explicitly
C.Inside try block Exception handled / by zero finally block is executed
D.exception handled normal flow

Answer:D

#IGNORE
41.Exception Handling with Method Overriding can be explained as___

A.garbage collection ended
B.final statement used to throw an exception explicitly
C.Inside try block Exception handled / by zero finally block is executed
D.If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but it can declare unchecked exception.

Answer:D
Explanation:If the superclass method declares an exception, subclass overridden method can declare same, subclass exception or no exception but cannot declare parent exception.

#P2
##MEDIUM
###BC

42.Predict the output of the following code.

import java.io.*;    
class Message{   
  void msg() {  
    System.out.println("Exception in parent method");  
    }    
}    
    
public class ExceptionChild extends Message{     
  void msg() throws IOException {    
    System.out.println("Exception in Child method");    
  }  
  public static void main(String args[]) {    
   Message m = new ExceptionChild();    
   m.msg();    
  }    
}    

A.Exception in parent method
B.Exception handled
C.msg() in ExceptionChild cannot override msg() in Message
D.Exception in Child method

Answer:C

#P1
##MEDIUM
###BC

43.Predict the output of the following code.

import java.io.*;    
class Parent{    
  void msg() {  
    System.out.println("parent method");  
  }    
}    
    
class Child1 extends Parent{    
  void msg()throws ArithmeticException {    
    System.out.println("child method");    
  }    
  
  public static void main(String args[]) {    
   Parent p =  new Child1();    
   p.msg();    
  }    
}   

A.child method
B.parent method
C.msg() in ExceptionChild cannot override msg() in Message
D.Exception in Child method

Answer:A

#IGNORE
44.What are Custom Exceptions? 

A.When we create our own exceptions that are derived classes of the Exception class is known as custom exception or user-defined exception.
B.Exception class
C.predefined exceptions
D.Exception in try statement

Answer:A
Explanation:Custom exceptions are used to customize the exception according to the user needs.

#IGNORE
45.Why do we use custom exceptions?

A.Custom Exception are used to catch and provide specific treatment to a subset of existing java exceptions.We also have exceptions related to business logic and workflow.
B.Exception class
C.predefined exceptions
D.Exception in try statement

Answer:A
Explanation:It is useful for the application users or the developers to understand the exact problem.In order to create custom exception, we need to extend Exception class that belongs to java.lang package.

#P2
##MEDIUM
###BC

46.Predict the output of the following code.

class InvalidAgeException  extends Exception  
{  
    public InvalidAgeException (String str)  
    {  
        super(str);  
    }  
}  
public class CustomException1  
{  
    static void valid(int age) throws InvalidAgeException{    
       if(age < 18){  
        throw new InvalidAgeException("An individual age is not eligible to vote");    
    }  
       else {   
        System.out.println("An individual is eligible to vote ");   
        }   
     }    
    public static void main(String args[])  
    {  
        try  
        {    
            valid(16);  
        }  
        catch (InvalidAgeException e)  
        {   
            System.out.println("Exception occured: " + e);  
        }   
    }  
}   

A.An individual is eligible to vote
B.Exception occured:InvalidAgeException:An individual age is not eligible to vote
C.An individual age is not eligible to vote
D.Exception in try statement

Answer:B


#IGNORE
47.Default exception handling can be defined as___

A.The exception object contains the name and description of the exception and the current state of the program where the exception has occurred. Creating the Exception Object and handling it in the run-time system is called throwing an Exception.
B.The object contains the name and description of the current state of the program where the exception has occurred.
C.In the try catch statement
D.In the throws statement

Answer:A
Explanation:The run-time system searches the call stack to find the method that contains a block of code that can handle the occurred exception. The block of the code is called an Exception handler.The run-time system starts searching from the method in which the exception occurred, and proceeds through the call stack in the reverse order in which methods were called.If it finds an appropriate handler, then it passes the occurred exception to it. An appropriate handler means the type of the exception object thrown matches the type of the exception object it can handle. If the run-time system searches all the methods on the call stack and couldnât have found the appropriate handler, then the run-time system handover the Exception Object to the default exception handler, which is part of the run-time system. This handler prints the exception information in the following format and terminates the program abnormally.

#P2
##MEDIUM
###BC

48.Debug the error for the following code.

class Catch {
public static void main(String args[]) {
try {
int a = 0;
int b = 42 / a;
} catch(Exception e) {
System.out.println("Generic Exception catch.");
}
catch(ArithmeticException e) { 
System.out.println("This is never reached.");
}
}
}

A.This is never reached
B.Generic Exception catch
C.reverse the order of the catch statements.
	catch(ArithmeticException e) { 
		System.out.println("This is never reached.");
	}
	catch(Exception e) {
		System.out.println("Generic Exception catch.");
	}
D.42

Answer:C

#P2
##MEDIUM
###BC

49.Predict the output of  the following code.

class CustomException extends Exception {
private int number;
CustomException(int x) {
number = x;
}
public String toString() {
return "CustomException[" + number + "]";
}
}
class CustomDemo {
static void validate(int x) throws CustomException {
System.out.println("Called validate(" + x + ")");
if(x > 100)
throw new CustomException(x);
System.out.println("Normal exit");
}
public static void main(String args[]) {
try {
validate(55);
validate(101);
} catch (CustomException e) {
System.out.println("Caught " + e);
}
}
}

A.55
B.101
C.Called compute(55)
Normal exit
Called compute(101)
Caught MyException[101]
D.Called validate 55

Answer:C

#P1
##MEDIUM
###BC

50.Predict the output of  the following code.

class TryCatch {
public static void main(String args[]) {
try {
int x = args.length;
int y = 42 / x;
System.out.println("x = " + x);
try { 
if(x==1) x = x/(x-x); 
if(x==2) {
int z[] = { 1 };
z[10] = 25; 
}
} catch(ArrayIndexOutOfBoundsException e) {
System.out.println("Array index out-of-bounds: " + e);
}
} catch(ArithmeticException e) {
System.out.println("Divide by 0: " + e);
}
}
}

A.C:\>java TryCatch
Divide by 0: java.lang.ArithmeticException: / by zero
C:\>java TryCatch One
a = 1
Divide by 0: java.lang.ArithmeticException: / by zero
C:\>java TryCatch One Two
a = 2
Array index out-of-bounds:
java.lang.ArrayIndexOutOfBoundsException
B.1
C.2
D.25

Answer:A

#IGNORE
51.Chained Exception can be explained as___

A.The exception object contains the name and description of the exception and the current state of the program where the exception has occurred. 
B.It allows you to associate another exception with an exception.This second exception describes the cause of the first  exception. 
C.It allows you to perform custom exception.
D.It allows you to perform runtime exception.

Answer:B

#P2
##MEDIUM
###BC

52.Predict the output of  the following code.

class ChainDemo {
static void proc() {
	NullPointerException e = new NullPointerException("top layer");
	e.initCause(new ArithmeticException("cause"));
	throw e;
}
public static void main(String args[]) {
	try {
	proc();
	} 
	catch(NullPointerException e) {
		System.out.println("Caught: " + e);
		System.out.println("Original cause: " +e.getCause());
		}
	}
}

A.Caught: java.lang.NullPointerException: top layer
Original cause: java.lang.ArithmeticException: cause
B.Caught:0
C.Original cause:10
D.Original cause: java.lang.Exception:Divide by zero 

Answer: A

#IGNORE
53.How the given method public String getMessage() performs?

A.This method returns the message String of Throwable and the message can be provided while creating the exception through its constructor.
B.This method returns the exception
C.This method returns the custom exception.
D.This method returns the runtime exception.

Answer:A

#IGNORE
54.How the given method public String getLocalizedMessage() performs?

A.This method returns the message String of Throwable and the message can be provided while creating the exception through its constructor.
B.This method returns the exception
C.This method returns the custom exception.
D.This method is provided so that subclasses can override it to provide a locale-specific message to the calling program. Throwable class implementation of this method use getMessage() method to return the exception message.

Answer:D

#P2
##MEDIUM
###BC

55.What this method public synchronized Throwable getCause() will do?

A.This method returns the message String of Throwable and the message can be provided while creating the exception through its constructor.
B.This method returns the exception
C.Throwable class implementation of this method use getMessage() method to return the exception message.
D.This method returns the cause of the exception or null if the cause is unknown.

Answer:D

#P1
##MEDIUM
###BC
56. What does toString() method in the Throwable class will do?

A.This method returns the message String of Throwable and the message can be provided while creating the exception through its constructor.
B.This method returns the information about Throwable in String format, the returned String contains the name of Throwable class and localized message
C.Throwable class implementation of this method use getMessage()method to return the exception message.
D.This method returns the cause of the exception or null if the cause is unknown.

Answer:B

#P1
##MEDIUM
###BC

57.When this method public void printStackTrace() perform some action?

A.This method returns the message String of Throwable and the message can be provided while creating the exception through its constructor.
B.This method returns the information about Throwable in String format, the returned String contains the name of Throwable class and localized message
C.This method prints the stack trace information to the standard error stream, this method is overloaded and we can pass PrintStream or PrintWriter as an argument to write the stack trace information to the file or stream.
D.This method returns the cause of the exception or null if the cause is unknown.

Answer:C

#IGNORE

58.What is a Call Stack in exceptions? 

A.This call stack returns the message while creating the exception through its constructor.
B.This call stack returns the information about Throwable in String format
C.The call stack is the ordered list of methods that had been called to get to a specific method.These are the methods which were called to get to the method in which the error occurred.
D.This call stack returns the cause of the exception or null if the cause is unknown.

Answer:C

#P1
##EASY
###BC

59.ArithmeticException is thrown when an  

A. exceptional condition has occurred in an arithmetic operation.
B. an arithmetic operator has found in an arithmetic operation.
C. exceptional condition has not occurred.
D. a number is not found in an  arithmetic operation.

Answer:A


#IGNORE
60.ArrayIndexOutOfBoundsException can be defined as ___

A.ArrayIndexOutOfBoundsException is thrown to indicate that an array has been accessed with an legal index. 
B.ArrayIndexOutOfBoundsException is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.
C.ArrayIndexOutOfBoundsException is thrown to indicate that an array has been accessed  greater than to the size of the array.
D.ArrayIndexOutOfBoundsException is thrown to indicate the index is negative to the size of the array.

Answer:B

#P1
##EASY
###BC

61.ClassNotFoundException is raised when ______

A. there is no try block in a class definition
B. we try to access a class whose definition is not found
C. we try to access a class  whose definition is found
D. we try to access a class  which should  be an abstract class.

Answer:B

#P1
##EASY
###BC

62. When will FileNotFoundException occur? 

A.FileNotFoundException is raised when a file is not accessible or does not open.
B.FileNotFoundException is raised when a file is in open mode.
C.FileNotFoundException is raised when a file is in read only mode.
D.FileNotFoundException is raised when a file is accessible but in view mode.

Answer:A

#P1
##EASY
###BC

63. When will IOException occur? 

A.IOException is thrown when an input-output operation is failed or interrupted.
B.IOException is thrown when an input operation is not in failure.
C.IOException is thrown when an output operation is not in failure.
D.IOException is thrown when an arithmetic error is occurred.

Answer:A

#P1
##MEDIUM
###BC

64.What is an Error class in exceptions? 

A.Error class is a compile time error class in java.
B.Error class in exception handling is a subclass of Throwable which represents a serious problem that a reasonable application should not try to catch. 
C.Error class in exception handling is a subclass of Runtime exception class which can be handled by try catch statement. 
D.Error class in exception handling is used to handle array index  error.

Answer:D

#P2
##MEDIUM
###BC

65.SocketException occurs _____

A. in  the socket class.
B. on the client-side when the server closed the socket connection before the response could be returned over the socket. 
C. on the server-side and the client-side.
D. on the server-side when the client closed the socket connection before the response could be returned over the socket.

Answer:D

#P1
##EASY
###BC

66.Predict the output of  the following code. 

class ExceptionNumber
{
   public static void main(String args[])
   {
      try{
	 int n=Integer.parseInt ("ABC") ;
	 System.out.println(n);
      }catch(NumberFormatException e){
	  System.out.println("Number format exception occurred");
       }
   }
}

A.Number format exception occurred.
B.ABC
C.0.
D.Arithmetic exception occurred.

Answer:A

#P1
##EASY
###BC

67.Predict the output of  the following code. 

public class ExceptionString
{
   public static void main(String args[])
   {
      try{
	 String s="Revature";
	 System.out.println(s.length());;
	 char t = s.charAt(0);
	 t = str.charAt(15);
	 System.out.println(t);
      }catch(StringIndexOutOfBoundsException e){
	  System.out.println("StringIndexOutOfBoundsException!!");
       }
   }
}

A.StringIndexOutOfBoundsException
B."Revature"
C.Revature
D.Reva

Answer:A

#P1
##EASY
###BC

68.Predict the output of  the following code. 

class ExceptionString1
{
   public static void main(String args[])
   {
	try{
		String s=null;
		System.out.println (s.length());
	}
        catch(NullPointerException e){
		System.out.println("NullPointerException");
	}
   }
}

A.-1
B.null
C.0
D.NullPointerException

Answer:D


#IGNORE
69. try with resources can be defined as___

A. you simply need to declare the required resources within the parenthesis, and the resource will be deleted 
B. Automatic resource management,which automatically closes the resources used within the try catch block.To use this statement, you simply need to declare the required resources within the parenthesis, and the created resource will be closed 
C. creating the resources.
D.which automatically opens the resources used within the try catch block.

Answer:B

#P2
##MEDIUM
###BC

70.What is the syntax for try with resources?

A.try(FileReader f = new FileReader("file path")) {
	// use the resource
	} catch () {
	// body of the catch block
	}
	}
B.try resource{
	// try code
	} catch () {
	// body of the catch block
	}
	}
C.try(Resource f = new Resource("file path")) {
	// use the resource
	} catch () {
	// body of the catch block
	}
	}
D.try( f("file path")) {
	// use the resource
	} catch () {
	// body of the catch block
	}
	}

Answer:A

#P1
##MEDIUM
###BC

71.Predict the output of  the following code. 

import java.io.*;
public class TryResources {
   public static void main(String args[]) {
      try(FileReader f = new FileReader("C://abc.txt")) {
         char [] a = new char[100];
         f.read(a);   
         for(char c : a)
         System.out.print(c);   
      } catch (IOException e) {
         e.printStackTrace();
      }
   }
}
A.deletes the characters from the file abc.txt
B.null
C.0
D.prints the characters from the file abc.txt 

Answer:D








