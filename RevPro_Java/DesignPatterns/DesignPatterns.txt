#P1
##EASY
###BC

1.What is Design Pattern?

A.Design patterns is a solution design.
B.Design patterns is a software design. 
C.Design patterns are useful to create a toolkit of design. 
D.Design patterns are a toolkit of tried and tested solutions to common problems in software design. 

Answer: D

#P1
##EASY
###BC

2.Creational design pattern can be defined as___

A.Creational design patterns provide solution to instantiate an object in the best possible way for specific situations.
B.Creational design patterns is used to create interfaces.
C.Creational design patterns is used to create classes and objects. 
D.Creational design is used to instantiate an object

Answer: A

#P1
##EASY
###BC

3.Structural design patterns can be defined as___

A.Structural design patterns provide different ways to create a class structure by using inheritance and composition to create a large object from small objects.
B.Structural design patterns is used to create an interface object.
C.Structural design patterns provide ways to create a class structure by using polymorphism.
D.Structural design patterns provide different ways to create a class structure by using aggregation and encapsulation to create a large object from small objects.

Answer:A

#P1
##EASY
###BC

4.Behavioral design patterns can be defined as___

A.Behavioral design patterns provide solution for the better interaction between interfaces.
B.Behavioral design patterns provide solution for the better interaction between objects and how to provide loose coupling and flexibility to extend easily.
C.Behavioral design patterns provide solution for the better interaction between classes.
D.Behavioral design patterns provide solution for the better interaction between objects and how to provide tight coupling and flexibility to extend easily.

Answer:B

#P1
##EASY
###BC

5.Singleton pattern can be described as__

A.Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists in the Java virtual machine. 
B.Singleton pattern used to create two instance of the class.
C.Singleton pattern  ensures that only has no instance of the class.
D.Singleton pattern is used to create class.

Answer:A

#P1
##EASY
###BC

6.Factory pattern can be defined as___

A.Factory pattern is used when we have a superclass with multiple sub-classes and based on output, we need to return one of the sub-class.
B.Factory pattern is used when we have a superclass with multiple sub-classes and based on input, we need to return one of the sub-class.
C.Factory pattern is used when we have a subclass with multiple superclasses and based on input, we need to return one of the sub-class.
D.Factory pattern is used when we have a subclass with multiple super classes and based on input, we need to return one of the sub-class.

Answer:B


#P1
##EASY
###BC

7.Adapter pattern is described as___

A.Adapter pattern is one of the structural design patterns and it’s used so that two related classes can work together. 
B.Adapter pattern is one of the structural design patterns and it’s used so that two related objects can work together. 
C.Adapter pattern is one of the structural design patterns and it’s used so that two unrelated interfaces can work together. 
D.Adapter pattern is one of the structural design patterns and it’s used so that two related interfaces can work together. 

Answer:C


#P1
##EASY
###BC

8.Composite pattern is defined as___

A.Composite pattern is one of the Structural design patterns and is used when we have to represent a no hierarchy.
B.Composite pattern is one of the Structural design patterns and is used when we don't want to represent a part-whole hierarchy.
C.Composite pattern is one of the Structural design patterns and is used when we have to represent a part-whole hierarchy.
D.Composite pattern is one of the Structural design patterns and is used when we have to create objects.

Answer:C


#P1
##EASY
###BC

9.What is Prototype Pattern?

A.Prototype Pattern reduces the need of sub-classing.It hides complexities of deleting objects.
B.Prototype Pattern reduces the need of sub-classing.It hides complexities of creating objects.
C.Prototype Pattern increases the need of sub-classing.It hides complexities of creating objects.
D.Prototype Pattern reduces the need of creating super classes.It hides complexities of creating objects.

Answer:B


#P1
##EASY
###BC

10.What is Composite pattern?

A.Component declares the interface for objects in composition.It implements default behavior for the interface common to only one class.
B.Component declares the interface for objects in composition.It implements default behavior for the interface common to all classes as appropriate.
C.Component declares the classes for objects in composition.It implements default behavior for the interface common to all classes as appropriate.
D.Component declares the interface for objects in composition.It implements default behavior for the classes common to all interfaces as appropriate.

Answer:B

#P1
##MEDIUM
###BC

11.How would you create a lazy instantiation in Singleton design pattern? 

A.class Lazy{  
 private static Lazy obj;  
 private Lazy(){}  
   
 public static Lazy getA(){  
   if (obj == null){  
      synchronized(Singleton.class){  
        if (obj == null){  
            obj = new Singleton(); 
        }  
    }              
    }  
  return obj;  
 }  
  
 public void doSomething(){  
  
 }  
} 
B.class Lazy{  
 private static Lazy obj;  
 private Lazy(){}  
   

  return obj;  
 }  
  
 public void doSomething(){  
  
 }  
} 
C.class Lazy{  
 private static Lazy obj;  
   
 public static Lazy getA(){  
   if (obj == null){  
      synchronized(Singleton.class){  
        if (obj == null){  
    
        }  
    }              
    }  
  return obj;  
 }  
  
 public void doSomething(){  
  
 }  
} 
D.class Lazy{  
   
 public static Lazy getA(){  
   if (obj == null){  
      synchronized(Singleton.class){  
        if (obj == null){  
            obj = new Singleton(); 
        }  
    }              
    }  
  return obj;  
 }  
  
 public void doSomething(){  
  
 }  
} 

Answer:A
Explanation: Define a class that has only one instance and provides a global point of access to it and instance should be created when required.

#P1
##MEDIUM
###BC

12.How would you create an adapter class for adapter factory design pattern? 
A.public class Bank{  
    private String BankName;  
    private String AccountHolderName;  
    private long AccountNumber;  
} 
B.public class Bank{ 
      
    public String getBankName() {  
        return BankName;  
    }  
    public void setBankName(String bankName) {  
        this.BankName = BankName;  
    }  
    public String getAccountHolderName() {  
        return AccountHolderName;  
    }  
    public void setAccountHolderName(String AccountHolderName) {  
        this.AccountHolderName= AccountHolderName;  
    }  
    public long getAccountNumber() {  
        return AccountNumber;  
    }  
    public void setAccNumber(long AccountNumber) {  
        this.AccountNumber = AccountNumber;  
    }  
} 
C.public class Bank{  
    private String BankName;  
    private String AccountHolderName;  
    private long AccountNumber;  
      
    public String getBankName() {  
        return BankName;  
    }  
    public void setBankName(String bankName) {  
        this.BankName = BankName;  
    }  
    public long getAccountNumber() {  
        return AccountNumber;  
    }  
    public void setAccNumber(long AccountNumber) {  
        this.AccountNumber = AccountNumber;  
    }  
} 
D.public class Bank{  
    private String BankName;  
    private String AccountHolderName;  
    private long AccountNumber;  
      
    public String getBankName() {  
        return BankName;  
    }  
    public void setBankName(String bankName) {  
        this.BankName = BankName;  
    }  
    public String getAccountHolderName() {  
        return AccountHolderName;  
    }  
    public void setAccountHolderName(String AccountHolderName) {  
        this.AccountHolderName= AccountHolderName;  
    }  
    public long getAccountNumber() {  
        return AccountNumber;  
    }  
    public void setAccNumber(long AccountNumber) {  
        this.AccountNumber = AccountNumber;  
    }  
} 

Answer:D
Explanation: Adapter Pattern which converts the interface of a class into another interface that a client wants.

#P1
##MEDIUM
###BC

13.How would you create an interface for Composite design pattern? 
A.public interface Employee {  
    public  int getId();  
    public String getName();  
    public double getSalary();  
       public void print();   
        
}
B.public interface Employee {  
    public  int getId();  
    public String getName();  
    public double getSalary();  
       public void print();  
    public void add(Employee employee);  
       public void remove(Employee employee);  
       public Employee getChild(int i);  
}
C.public interface Employee {  
    public void add(Employee employee);  
       public void remove(Employee employee);  
       public Employee getChild(int i);  
}
D.public interface Employee {  
    public void add(Employee employee);  
       public void remove(Employee employee);  
       public Employee getChild(int i);  
}

Answer:B

#P1
##MEDIUM
###BC

14.What are the steps to create a Factory Design Pattern? 

A.Define a class.Define single parent classes. Define a Factory class that creates the child class and returns the parent class reference.
B.Define a final class.Define multiple child final classes. Define a Factory class that creates the child class and returns the parent class reference.Creation of parent classes should happen only through the factory method.
C.Define an abstract class or interface.Define multiple child classes. Define a Factory class that creates the child class and returns the parent class reference.Creation of child classes should happen only through the factory method.
D.Define an abstract class or interface.Define multiple child classes. Creation of parent classes should happen only through the factory method.

Answer:C

#P1
##MEDIUM
###BC

15.What are the benefits of State Pattern? 

A.State Pattern keeps the state-specific behavior.It makes any state transitions explicit.When the behavior of object depends on its state and it must be able to change its behavior at runtime according to the new state.
B.State Pattern keeps the state-specific behavior.It makes any state transitions explicit.
C.State Pattern keeps the state-specific behavior.It makes any state transitions explicit.When the behavior of class depends on its state and it must be able to change its behavior at compiletime according to the new state.
D.State Pattern keeps the state-specific behavior.It makes any state transitions implicit.When the behavior of class depends on its state and it must be able to change its behavior at runtime according to the new state.

Answer:A










