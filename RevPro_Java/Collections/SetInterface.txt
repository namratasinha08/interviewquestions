##Java,Collections,SetInterface

#P1
##EASY
###BC
1. Set Interface is used to store unique elements of the same type. Classes that implements Set interface are____

    A. HashTable
    B. LinkedHashSet
    C. TreeSet
    D. All of the above

Answer: D

#P1
##EASY
###BC
2. Set Inherits all the methods of Collection Interface like____

    A. addAll()
    B. removeAll()
    C. retainAll()
    D. All of the above

Answer: D

#P1
##EASY
###BC
3. A class that has key and values, it converts the keys into hashcode and stores them as the indexes of an array. What is that?

    A. HashTable
    B. LinkedHashSet
    C. TreeSet
    D. All of the above

Answer: A

#P1
##EASY
###BC
4. A class which stores data in the form of node( data+ addresss of consecutive element) and its a part of List Interface.

    A. HashTable
    B. LinkedHashSet
    C. TreeSet
    D. All of the above

Answer: B

#P1
##EASY
###BC
5. _______ stores, unique elements by retaining the order of elements.

    A. HashTable
    B. LinkedHashSet
    C. TreeSet
    D. All of the above

Answer: C

#P1
##MEDIUM
###BC
6.What is the time complexity of add() method for a HashSet?

    A. O(n)
    B. O(1)
    C. O(log n)
    D. O(2n)

Answer: B

#P1
##MEDIUM
###BC
7. What is the time complexity of remove(element) method for a HashSet?

    A. O(1)
    B. O(n)
    C. O(log n)
    D. O(2n)

Answer: A

#P1
##MEDIUM
###BC
8. What is the time complexity of conatins() method for a HashSet?

    A. O(2n)
    B. O(n)
    C. O(log n)
    D. O(1)

Answer: D

#P1
##EASY
###BC
9. _______ class is the special Set implementation for enum types. It inherits AbstractSet class and implements the Set interface.
Features

    A. ValueSet
    B. keySet
    C. EnumSet
    D. TreeSet

Answer: C

#P1
##EASY
###BC
10. _______ method generates the hashCode of two objects, if two objects are equal then the hash Code generated for two objects is the same, while the inverse may or may not be true.

    A. hashCode()
    B. hashFunction()
    C. hashMap()
    D. None of the above

Answer: A

#P1
##EASY
###BC
11. The default implementation of the Object class generates different hash codes for different objects, even if they are equal according to the _______ method.

    A. equal(element)
    B. equalize()
    C. equalto()
    D. equals()

Answer: D

#P1
##EASY
###BC
12. _______ doesnâ€™t maintain an ordered collection of elements.

    A. TreeSet
    B. HashSet
    C. OrderedSet
    D. None of the above

Answer: B

#P1
##EASY
###BC
13. What is the output of the following program?

    HashSet<Integer> hs= new HashSet<>();
        hs.add(1);
        hs.add(3);
        hs.add(2);
        hs.add(-1);

    TreeSet<Integer> ts = new TreeSet<>(hs);
    LinkedHashSet<Integer> lhs = new LinkedHashSet<>(ts);

    System.out.println(hs);
    System.out.println(ts);
    System.out.println(lhs);

    A. Random order, [-1,1,2,3], [1,3,2,-1]
    B. [-1,1,2,3], Random order, [1,3,2,-1]
    C. [-1,1,2,3], Random order, [-1,1,2,3]
    D. Random order, [-1,1,2,3], [-1,1,2,3]

Answer: D

#P1
##EASY
###BC
14. Consider there are two hash sets a and b with some elements in each, How to get the intersection of a and b?

    A. a.retainAll(b)
    B. a.retain(b)
    C. a.contains(b)
    D. b.containsAll(a)

Answer: A

#P1
##EASY
###BC
15. Consider there are two hash sets a and b with some elements in each, How to get the union of a and b?

    A. a.containsAll(b)
    B. a.add(b)
    C. a.addAll(b)
    D. None of the above

Answer: C

#P1
##EASY
###BC
16. Consider there are two hash sets a and b with some elements in each, How to check if a is a subset of b?

    A. b.containsAll(a)
    B. b.contains(a)
    C. b.retainAll(a)
    D. None of the above

Answer: A

#P1
##EASY
###BC
17. Consider there are two hash sets a and b with some elements in each, How to get the separate and the unique elements present in a but not b?

    A. a.remove(b)
    B. a.removeAll(b)
    C. a.contains(b)
    D. None of the above

Answer: B

#P1
##EASY
###BC
18. Which of the following is true for the code snippet mentioned below?

HashSet<Integer> a = new HashSet<>();
    a.add(2);
    a.get(0);
    a.set(0,1);
    a.isEmpty();

    A. a.get(0) returns 2 and a.set(0,1) overrides 2 to 1.
    B. a.get(0) returns 2 and a.set(0,1) throws an exception.
    C. a.get(0) throws an exception and a.set(0,1) overrides 2 to 1.
    D. both a.get(0) and a.set(0,1) throws exceptions.

Answer: D
