ASP.Net
-------
1.Define ASP.NET?
Answer:
.NET web development framework for developing Web APIs, internet connected apps, associated with UI.It is Open source for building modern web apps and services.It is base framework for processing web requests in C#.It is Web-page templating syntax for building dynamic web pages.

2.How can you differentiate between ASP.Net core and ASP.Net MVC?
Answer:
ASP.Net Core is an improved version of ASP.NET with richer functionalitiy, a more comfortable interface, new librariers, and other disctinctions.It is Cross-platform and available as an open-source tool
ASP.Net MVC  is an applicaiton framework based on the Model-View-Controller architectural pattern and make decisions how to pass data to the view and how to expose your middle tier to the controllers.
The requests resolved by invoking a method on a controller class

3.Define Asynchronous programming?
Answer:
It is Utilizied for I/O-bound needs, requesting data from a network, accessing a database, or read/writes to a file system and it supports by the async and await keywords.The core of async programming are the Task objects like return types: 
Task and Task<T.> (type)

4.How is caching used in an ASP.NET application?
Answer:
Caching is used for building high-perforamce, scalable Web Applications and has ability to store items, whether data objects, pages, parts of a page into memory the initial time they are requested.It allows you to avoice recreating information that satisfied a previous request, particularly information that demands significant processor time or other resources

5.How are filters used for in ASP.NET Core and differ from middleware? 
Answer:
It allows code to run before or after specific stages in the request processing piepline and handles cross-cutting concerns for error handling, caching, configuration, authorization, and logging.
MVC filters only run for requests that come to MVC, while middleware operates on the level of ASP.NET Core cand can act on every single request that comes in to the application

6.How Model binding done in ASP.Net?
Answer:
Model binding retrieves data from various sources such as route data, form fields, and query strings and it provides the data to controllers and Razor pages in method parameters and public properties.It converts string data to .NET types and updates properties of complex types.It retrieves data in the form of key-value pairs from various sources in an HTTP request.

7.How are controllers used in ASP.Net?
Answer:
It is the  "brain" of an ASP.NET Core Application and process incoming HTTP requests and prepare the response to be sent to the clients.It perform operations on data provided through models and selects Views to render on the browser.

8.How is middleware used in ASP.Net?
Answer:
It is a software which is  assembled into an application pipeline to handle requests and responses and request pipeline consists of a sequence of request delegates, called one after the other.To implement routing, we have to use the routing middleware in the HTTP request processing pipeline by authenticating and authorizing users to access a specific resource.It is used for 
logging requests and handling exceptions.

9.What are Data Annotations? 
Answer:
.NET attributes which can be applied to an entity class or properties to override default codefirst conventions and they are used for Primary key and ForeignKey annotation.It is required to indicate the property which is required for the table to map the class name which is different from the table name in the database and the column to map the property name which is different from the column in the database.

10.What is the DbContext Class? 
Answer:
It represents a session with the database  and a collection of tables and views in the database and can be used to query and save instances of your entities to a database.It is a combination of the unit of work and repository patterns.It adds a new entity to DbCo, inserted into database when SaveChanges() is called, can be used asynchronously and finds an entity with the given primary key values, can be used asynchronously.DbContext corresponds to a collection of tables or views in your database, while DbSet corresponds to a singular table or view.

11.What is Entity Framework Core?
Answer:
Entity Framework Core is a  cross-platform version of Entity Framework and it enables .NET developers to work with a database using .NET objects.It eliminates the need for most of the data-access code that typically needs to be written and  data acess technology that can serve as an ORM.

12.Define ORM?
Answer:
Object-Relational Mapping is a programming technique that abstracts your code from the database behind it and can easily switch between different databases without having to change your code.

13.Explain the approaches of an Entity Framework Core?
Answer:
The Database first approach is traditional approach where we first create the database and its dependencies first, then manage it with the application.
The Code first approach can be done by the database which is created by the model class and creating a class with required properties, setting the key and other attributes using Data Annotations.

14.Explain OpenAPI in ASP.Net? 
Answer:
ASP.NET Core Web API, Swagger. OpenAPI is a specification, while Swagger is tooling that used the OpenAPI specification.A language-agnostic specification for describing REST APIs.It allows users to understand the capabilities of a REST API without direct access to the source code and minimizes the amount of work needed to connect decouple services and it describes the capabilities of your API which is based on the XML and attribute annotations within the controllers and models through openapi.json file.Swagger UI offers a web-based UI that provides information about the service, using the generated OpenAPI specification.

15.What are the types of validation controls in Asp.net?
Answer:
- Required Field Validator
- Range Validator
- Compare Validator
- Regular Expression Validator
- Custom Validator
- Validation Summary

16.How can you differentiate server-side and client-side caching?
Answer:
Server-side caching caches output before it's sent to the browser. Subsequent requests to that data will retrieve from the cache.
Client-side caching stores data like pages accessed over the Internet on a user's hard drive so that it doesn't need to be downloaded again.

17.Explain the validation controls in ASP.Net?
Answer:
Required Field Validator checks whether the control have any value. It is used when you want the control should not be empty. 
Range Validator checks if the value in validated controls is in that specific range. 
Compare Validator checks that the value in controls should match some specific value. 
Regular Expression Validator When we want the control, value should match with a specific regular expression. 
Custom Validator is used to define user defined validation.

18.What is a bubbled event?
Answer:
When there is a complex control, like DataGrid, writing an event processing routine for each object like cell, button, row, etc. is quite tedious. The controls can bubble up their event handlers, allowing the main DataGrid event handler to take care of its constituents.

19.What are the different ways of handling state in ASP.Net Web forms?
Answer:
We can handle state in ASP.NET Web applications by using :
- Cookies
- Query strings
- Hidden fields
- Session
- Application objects

20.How can you differentiate between Server.Transfer and Response.Redirect?
Answer:
Server.Transfer does not send any message to the browser but rather redirects the user directly from the server itself.
Response. Redirect sends message to the browser saying it to move to some different page.

21.What is the difference between Authentication and Authorization?
Answer: 	
Authentication is the process of identifying/validating the user against the credentials (username and password) and Authorization performs after authentication.Authorization is the process of granting access to those users based on identity.
Authorization allowing access of specific resource to user.

22.What is the difference between Server-side and client-side code?
Answer:
Server side code is executed at the server side on IIS in Asp.NET framework, while client side code is executed on the browser.

23.How do you turn off cookies for one page in the site?
Answer:
We have to use the Cookie.Discard Property which gets or sets the discard flag set by the server. When true, this property instructs the client application not to save the Cookie on the user's hard disk when a session ends.

24.How can you differentiate between a Web Service and a Web server?
Answer:
A Web Service uses custom code to provide functions to client programs located somewhere on the Internet. A Web server listens for Internet requests, such as HTTP or SOAP requests, and responds with files. Most Web Services use a Web server to "feed" them with requests from clients and to "push" data back to client programs.

25.How to Manage State in ASP.Net?
Answer:
There are several ways to manage a state.
- ViewState
- QueryString
- Cookies
- Session
- Application

26.What is the difference between "Web.config" and "Machine.config"?

Answer:
"Web.config" files apply settings to each web application,but whereas "Machine.config" file apply settings to all ASP.NET applications.

27.What is the sequence in which ASP.NET events are processed?

Answer:
- Page_Init
- Page Load
- Control Events
- Page-Unload Events

28.What is a postback? and when is it used in ASP.NET Web forms?

Answer:
A postback is the name for the page request that an ASP.NET page sends to itself when a Web control is activated, such as when users click a button.
Most Web forms use the HTML form control, which allows users to submit data using HTTP Post requests.

29.What is Session and Application object?

Answer:
Session object store information between HTTP requests for a particular user, while application object are global across users.

30.What are different types of directives in .NET?
Answer:
The different types of directive in .Net are : @Page, @Control, @Import, @Implement, @Register, @Assembly, @OutputCache, @Reference

31.What are cookies?
Answer:
Cookies are small pieces of text, stored on the client's computer to be used only by the website setting the cookies. 
This allows webapplications to save information for the user, and then re-use it on each page if needed.

32.What is Marshaling?

Answer:
Marshaling is used when an object is converted so that it can be sent across the networks or across applications domains.

33.What are the major events in Global.Asax file?

Answer:
- Application_Init
- Application Disposed
- Application Error
- Application Start
- Application End
- Application_BeginRequest
- Application_EndRequest
- Session Start
- Session End
- Application_AuthorizationRequest

34.Define Datagrid?

Answer:
DataGrid is a Web server control for displaying information from a data source. It is easy to use and can display editable data in a professional-looking grid by setting only a few properties. 
At the same time, the grid has a sophisticated object model that provides you with great flexibility in how the data is displayed.

35.What is the use of "EnableViewState" property?

Answer:
Enable View State turns on the automatic state management feature that enables server controls to re-populate their values on a round trip without requiring any code. 
since the state of a control is passed to and from the server in a hidden form.

36.What is the difference between Server-side scripting and Client-side scripting?

Answer:
Server side scripting means that all the script will be executed by the server and interpreted as needed. ASP doesn't have some of the functionality like sockets, uploading, etc.
Client side scripting means that the script will be executed immediately in the browser such as form field validation, clock, email validation, etc. Client side scripting is usually done in VBScript or JavaScript.

37.Which is the ASP.Net class reads the contents of a form after the user clicks the Submit button?

Answer:
The HttpResponse class reads the content of the form. This class can be accessed using the Response object, where you can use the form or parameters collection to find each form entry.

38.What are ASP.NET Web Forms?

Answer:
Web Forms are the User Interface (UI) elements that gives Web applications their look and feel. Web Forms are similar to Windows Forms in that they provide properties/ methods, and events for the controls that are placed onto them.
However, these UI elements render themselves in the appropriate markup language required by the request, e.g. HTML. 

39.What is the difference between ASP.Net Web API and WCF?

Web API:
It is a web Application Programming Interface
It uses HTTP which is suitable for various protocols which support on various browser
Web API   a simple class file with .cs (C#) extension
Web API support JSON or XML
It is not open source but it can be understood by the client who knows the Xml

WCF:
It is a Windows Communication Foundation
Multiple protocols like: HTTP, HTTPS, Name Pipes, MSMQ,  etc., are supported and is allowed to switch between any of them
The Extension of WCF service is .svc
It support JSON,XML,ATOM data format
If the client knows the XML then it doesn't meant for them

40.Explain Cookie-less Session in ASP.Net?

Answer:

Sessions are used in ASP.NET applications for state management. Sessions also make use of cookies to associate sessions with the correct user. But when browser cookies are turned off then in that case cookie-less sessions are used. It appends the values to the browser’s URL that is required to associate with the user.

By default sessions use a cookie in the background, to enable cookie-less sessions, the following settings are required to make in web.config file.

<sessionState cookieless="true" />
The possible options to set cookieless options  are:

UseCookies: cookies are always used.
UseUri: Instead of cookies, use the URL to store the session id
UseDeviceProfile: Sessions uses cookies if the browser supports, else URL is used.
AutoDetect: Session uses browser cookies if cookies are enabled else URL is used to store session.

41.What are the advantages of using session?

Answer:

Advantages of using session:

- It helps us to maintain user state/data.
- It is very easy to implement.
- A session can store any kind of object in it. : Example: datatable, dataset... etc.
- By using session we don't need to worry about data collapse because it stores every client data separately.
- A session is secure and transparent from the user.
- It is a global storage mechanism which helps in accessing the value from all pages in the web application
- It is easy to use as session stores data in memory object of the current application domain.
- It stores the client data separately so there is no worry about data collapse
- It is secure and transparent from the user.
- It can work in the multi-process configuration.
- It always ensures data durability, since the session state retains the data even if the works process restart

42.What are the names of events in page-life-cycle?

Answer:

• Page_PreInit
• Page_Init
• Page_InitComplete
• Page_PreLoad
• Page_Load
• Page_LoadComplete
• Page_PreRender

43.What are methods of navigation in ASP.Net?

Answer:

• Hyperlink control
• Server.Transfer
• Server.Execute
• Response.Redirect
• Window.Open script


44.Explain ASP.Net security controls?

Answer:
The ASP.Net security controls are explained below:

<asp:Login>: It allows the users to enter their credentials
<asp:LoginName>: Used to display the name of the logged-in user
<asp:LoginStatus>: Shows as to whether user is authenticated or not
<asp:LoginView>: It provides various login views depending on the selected template
<asp:PasswordRecovery>: E-mail users the lost password

45.What is AdRotator control in ASP.Net?

Answer:
The AdRotator control is used for the purpose of advertisements to web pages. It randomly displays 
advertisements one by one when the web page is refreshed. This control is associated with links as you 
click on the advertisement, it redirects to other pages.

46.What is globalization and localization?

Answer:
The globalization is a procedure used to identify the specific part of a web application, different for 
various languages and make that part separate from the core of web application while localization is a 
technique to configure web application to make it supportive for a specific language or locale.

46.What is web.config?

Answer:
Configuration files of ASP.Net are XML files for application level settings. These are saved in the name 
of web.config. These are available in multiple directories of web application server. ASP.Net uses the 
web.config files to compute collection of settings for every URL target request, at run time. These 
settings computer once and cached across further requests

47.What is state management?

Answer:
State management is used to trace information or data that affect the state of applications. In .Net 
framework, state can be maintained by the following mechanism
• Client based state management uses the following techniques for implementation 
- View State
- Hidden Fields
- Cookies
- Query Strings
- Control State 
• Server-based state management uses following techniques for implementation 
- Session State
- Profile Properties
- Application stat

Coding
------


48.How can we cache multiple responses from a single web form?

Answer:
We can cache multiple response from a single web form by using any one of the attributes from VaryByParam, VaryByHeaders or VaryByCustom attributes.

Example: If we want display different places like city data on our page where we can choose city name from the drop down list. On SelectedIndexChanged event of the Drop down we have to write some logic to fetch the city  data according to the selected value and display the data of the particular city. By setting the VaryByParam attribute to the dropdown will cache all the responses received from server on SelectedIndexChanged event of drop down. 

 <%@ OutputCache Duration="20" Location="Server" VaryByParam="cityDropDown%>
<aspx:DropDownList ID="cityDropDown" AutoPostBack="true" runat="server" 
        onselectedindexchanged=" cityDropDown _SelectedIndexChanged">
      <asp:ListItem Text="Chennai" Value=" chennai"></asp:ListItem>
      <asp:ListItem Text="Delhi" Value=" delhi "></asp:ListItem>
       <asp: ListItem Text="Mumbai" Value=" mumbai "></asp: ListItem>
    </asp:DropDownList>

49.Explain partial classes

Answer:
While programming in C#, we can split the definition of a class over two or more source files. The source files contain a section of the definition of class, and all parts are combined when the application is compiled. For splitting a class definition, we need to use the partial keyword.

Example:

We have a file with a partial class named as Rect

namespace Rectangle
{
   class File1
   {
   }
   public partial class Rect
   {
       private int l;
       private int b;
       public Rect(int l, int b)
       {
           this.l = l;
           this.b = b;
       }
   }
}
Here is another file named as File2.cs with the same partial class Record

namespace Rectangle
{
   class File2
   {
   }
   public partial class Rect
   {
       public void PrintRect()
       {
           Console.WriteLine("Length:"+ l);
           Console.WriteLine("Breadth:"+ b);
       }
   }
}
The main method of the project

namespace Rectangle
{
   class Shape
   {
       static void Main(string[] args)
       {
           Rect myRect = new Record(4, 8);
           myRect.PrintRect();
           Console.ReadLine();
       }
   }
}

50.Explain the different state management techniques in .Net?

Answer:

State management basically stores the information of user/Page or object when a user makes a request on a web page, since HTTP is a protocol which doesn’t store the information during each request made by the user.so Asp.net state management is used to preserve the data.

Client side
Hidden Field
View State
Cookies
Control State
Query Strings
Server side
Session
Application
Server Side:-

51. Session: when we want to store the data of web page over multiple requests we use session. In this technique we can store any kind of information or object in server memory it basically stores the information. The session is user specific since it stores the information of user separately. When we store data to Session state, a session cookie named is ASP.NET_SessionId is created automatically.

Example:

Storing the data in Session object

Session ["UserName"] = txtName.Text;
Retrieving the data from the Session object

Label1.Text = Session ["UserName"].ToString();
Session timeout is 20 min if we want to increase the timeout of session then we need to configure the web config

<configuration>
 <system.web>
   <sessionState timeout="40" />
 </system.web>
</configuration>

2. Application object: In application object, we can store the information at the application level rather than User level, where every user can access that information .the main disadvantage is that sometimes there is a concurrency problem, so for that, we use a lock and unlock method. So if multiple requests came for same data then only one thread can do work.

Example:

Application["Message"] = "Welcome to ASP.Net";
We can use an application object to count the number of visitors on that website.

Client Side: 

1.Query Strings: When we want to transfer the data over the pages from the URL then we use query string, it cannot handle the huge data and it is compatible with all browsers, we cannot transfer the objects and controls in query strings, so it is not meant for transferring sensitive data through query string.

Example: 

Response.Redirect( "SecondPage.aspx?Type=01&Query=Query1" );
Or if we want to use query string to transfer the data then we can encrypt the sensitive data and we can transfer the data.

2.Control State: It is used to transfer the data which is stored in controls .it is just like same as view state but here we can store the data of the controls like dropdown list`s selected items, we cannot disabled the control state if viewstate is disabled then control state works same as view state.

3.View State: It is one of the finest methods to preserve the data, in view state we can store any kind of data like controls data, and even variables and raw data, view state encrypt the data when it will render to the user, so if user wants to see the value of view state in view source it will contain the symbols only which are very hard to decrypt.

The only disadvantage is that page contains much space over the page. To handle the view state we just need to "EnableViewState = true" attribute to any control to save its state,

Example:

public class Person
{
public string FirstName {get;set;}
public string LastName {get;set;}
}
public partial class default : Web.UI.Pages
{
Person p = new Person();
p.FirstName = "Harshit";
p.LastName = "Mittal";
ViewState["PersonDetails"]=p;
}

4.Cookies: Cookies are used to identify the user on a web page whenever the user makes the request for the first time it stores that request data in the cookies and when the user visit that web page for the second time then browser check the cookies data with second request data made by the user if the result matches browser to consider them as a previous user else consider a new user.

Example: The Case of Remember me on every login page.

There are 2 types of cookies:

Persistence cookies
Non- Persistence cookies
Persistence cookies - When we want to store the data in cookies for a specific period of time or for permanent use then we use persistence cookies
Example: 

Response.Cookies["nameWithPCookies"].Value = "This is A Persistence Cookie";
Response.Cookies["nameWithPCookies"].Expires = DateTime.Now.AddSeconds(10);
Non Persistence cookies - In this the data stored in the cookies remain in the client hard disk folder till the time the browser is running when the browser is closed then the information of cookies is lost.
Example: 

Response.Cookies["nameWithNPCookies"].Value = "This is A Non Persistence Cookie";

5.Hidden Field - When we want to store the small amount of data or we can say the if want to save the single value, hidden field controls is not rendered on the client browser, it is invisible to the browser.

Example:  

<asp:HiddenField ID="HiddenField1" runat="server"  />
At the server code

protected void Page_Load(object sender, EventArgs e)
{
  if (HiddenField1.Value != null)
  {
   int val= Convert.ToInt32(HiddenField1.Value) + 1;
   HiddenField1.Value = val.ToString();
   Label1.Text = val.ToString();
  }
}

52.How to use nullable types in .Net?

As we know we cannot assign the null value to any value type so for that we use nullable type where we can assign null value to the value type variables.

Syntax:  

Nullable<T> where T is a type.
Nullable type is an instance of System.Nullable<T> struct
Nullable Struct :

[Serializable]

public struct Nullable<T> where T : struct
{        
   public bool HasValue { get; } // it will return true if we assigned a value, if there is no value or if we assign a null value it will return false;
   public T Value { get; }
}
HasValue :
static void Main(string[] args)
{
   Nullable<int> i = null;
   if (i.HasValue)
       Console.WriteLine(i.Value);
   else
       Console.WriteLine("Null");
}
Example: 

[Serializable]

public struct Nullable<T> where T : struct
{        
   public bool HasValue { get; }
   public T Value { get; }
}
static void Main(string[] args)
{
   Nullable<int> i = null;
   if (i.HasValue)
       Console.WriteLine(i.Value); // or Console.WriteLine(i)
   else
       Console.WriteLine("Null");
}
Output:

Null
It will check whether an object has been assigned a value if it is having null value it will return false and the else part will be executed.

To get the value of i using the nullable type you have to use GetValueOrDefault() method to get the actual value.

static void Main(string[] args)
{
   Nullable<int> i = null;
   Console.WriteLine(i.GetValueOrDefault());
}


53.What are the extension methods and where can we use them?

Answer:

Extension methods allow you to add our own custom method in any custom class without modifying into it and in our custom class and it will be available throughout the application by specifying namespace only where it is defined.

Example: 

namespace ExtensionMethod
{
   public static class IntExtension
    {
       public static bool IsGreaterThan(this int i, int value)
       {
           return i > value;
       }
   }
}
Here the first parameter specifies the type on which the extension method is applicable. We are going to use this extension method on int type. So the first parameter must be int preceded with the modifier.

using ExtensionMethod;
class Program
{
   static void Main(string[] args)
   {
       int i = 10;
       bool result = i.IsGreaterThan(100);
       Console.WriteLine(result);
   }
}
Output:

False

54.What is the difference between "throw" and "throw ex" in .Net?

Answer:

In Throw, the original exception stack information is retained.

Example:

For Throw :

try

{
//  some operation that can fail
}
catch (Exception ex)
{
throw;
}
For Throw Ex:

In Throw Ex the original information is overridden by the External information and you will lose the original information.

try
{
// do some operation that can fail
}
catch (Exception ex)
{
// do some local cleanup
throw;
}

55.Explain ViewState with an example?

Answer:

ViewState is used to persist the data of page or page controls on postback. Viewstates are present on a page as a hidden field with data in an encrypted format. We can store any kind of data.

Advantages:

Stored only at the client side, not on the server side.
Since data in ViewState is always in encrypted form, hence secure.
Viewstates can be enabled or disabled by viewstate properties.
Viewstates can implement it at the page level or at the control level.
Disadvantages:

If the size of viewstate data becomes large, then there might be a page load problem.
  data is limited to the current page only, its information cannot be passed from one page to another.
Example:

public class Person
{
public string FirstName {get;set;}
public string LastName {get;set;}
}
public partial class default : Web.UI.Pages
{
Person p = new Person();
p.FirstName = "Revature";
p.LastName = "India";
ViewState["PersonDetails"]=p;
}

