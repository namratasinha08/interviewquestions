//Question.1
::EncapsulationAndAbstraction::
_______ is creating a class with related fields and methods and hiding the fields and methods from the rest of the world.
{
    = Encapsulation
    ~ Abstraction
    ~ Method-Overloading
    ~ Method-Overriding
}

//Question.2
::EncapsulationAndAbstraction::
_______ is the process of hiding certain details and showing only essential information to the user.
{
    ~ Inheritance
    ~ Polymorphism
    ~ Encapsulation
    = Abstraction
}

//Question.3
::EncapsulationAndAbstraction::
When do we use Interface?
{
    ~ When classes are not related, they have the same methods but different implementations an interface is used.
    ~ When behaviour is specified but the implementation of the behaviour can be altered.
    ~ To implement Multiple Inheritance of value.
    = All of the above.
}

//Question.4
::EncapsulationAndAbstraction::
Which of the following are NOT true?
{
    ~ An interface can only extend another interface
    = An abstract class cannot have protected and public abstract methods
    ~ An abstract class can have static, final or static final variable with any access specifier
    ~ An abstract class can extend only one class or one abstract class at a time
}

//Question.5
::EncapsulationAndAbstraction::
What members are allowed in an abstract class?
{
    ~ Abstract Method
    ~ Non-Abstract Method.
    ~ Constructor
    = All of the above
}

//Question.6
::EncapsulationAndAbstraction::
Which of the following is true when an abstract class implements an Interface?
{
    ~ Abstract class must override all the methods of an interface
    ~ Abstract class must override all the abstract methods of an Interface.
    = The abstract class does not need to override all the methods of the interface.
    ~ None of the above.
}

//Question.7
::EncapsulationAndAbstraction::
Is it possible to create an object for an abstract class? {F}

//Question.8
::EncapsulationAndAbstraction::
A vending machine has different items and functions to take the cash and dispense the item, but all these occur internally and as an external user one can only access it using selection buttons. this is an example for?
{
    ~ Polymorphism
    ~ Inheritance
    = Encapsulation
    ~ None of the above.
}

//Question.9
::EncapsulationAndAbstraction::
What is the output of the following code?
<pre>
interface Car{
    void engine();
    void brake();
}

abstract public class Audi implements Car{
    
    public static void main(String[] args) {
        
    }

    @Override
    public void engine() {
        // code 
    }
}
</pre>
{
    ~ Compiletime error caused by the main method
    ~ Compliletime error caused by not implementing all the methods of the interface
    ~ Runtime error
    = No error
}

