// Question.1
::Map Interface::
_______ doesn't store duplicate values and one key can have at most one value.
{
    ~ Stack
    ~ Vector
    ~ HashSet
    = Map
}

// Question.2
::Map Interface::
_______ is synchronized. It is thread-safe and can be shared with many threads.
{
    ~ Queue
    = HashTable
    ~ HashSet
    ~ HashMap
}

// Question.3
::Map Interface::
_______ is slow in comparison to _______ because it provides the performance of O(log(n)) for most operations like add(), remove() and contains().
{
    = TreeMap, HashMap
    ~ HashSet, HashMap
    ~ HashMap, TreeMap
    ~ None of the above
}

// Question.4
::Map Interface::
What happens when you try to add a key-value pair to an existing key in HashMap?
{
    ~ It remains unchanged
    = It overrides the value
    ~ It overrides the Key
    ~ None of the above
}

// Question.5
::Map Interface::
The _______ should be used when we do not require key-value pair in sorted order.
{
    ~ HashSet
    ~ TreeSet
    ~ TreeMap
    = HashMap
}

// Question.6
::Map Interface::
_______ is the set of key-value pairs from a Map.
{
    = entrySet
    ~ keySet
    ~ values
    ~ None of the above
}

// Question.7
::Map Interface::
Consider that a country stores its citizen's data in a form of Aadhar number and age. A deadly virus outbreak led to a global shutdown and the country wants to vaccinate the older people first as they get easily infected by the virus. Which of the following best represents the scenario?
{
    ~ TreeMap with age as key and Aadhar number as value but ordered by key.
    = TreeMap with Aadhar number as key and age as value but ordered by value in descending order.
    ~ HashMap with age as key and Aadhar number as value.
    ~ HashMap with Aadhar number key and age as value .
}

// Question.8
::Map Interface::
Write a syntax to order the HashMap based on the value?
{
    = hm.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEach(System.out::println);
    ~ hm.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEach(System.out::println);
    ~ hm.entrySet().stream().sorted(Map.Entry.comparingByValueSet()).forEach(System.out::println);
    ~ None of the above
}

// Question.9
::Map Interface::
Given 2 HashMaps, what is the syntax to check if a Map is a sub-map of another Map.
{
    ~ System.out.println(Map1.entrySet().containsAll(Map2.keySet()));
    = System.out.println(Map1.entrySet().containsAll(Map2.entrySet()));
    ~ System.out.println(Map1.containsAll(Map2.keySet()));
    ~ None of the above
}

// Question.10
::Map Interface::
HashMap allows a _______ null key and _______ null values.
{
    ~ single, single
    ~ multple, single
    = single, multiple
    ~ zero, single
}