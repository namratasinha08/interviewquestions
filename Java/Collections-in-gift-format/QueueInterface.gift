// Question.1
::Queue Interface::
_______ stores elements before processing and normally queue follows the First in First out principle.
{
    ~ Stack
    = Queue
    ~ ArrayList
    ~ LinkedList
}

// Question.2
::Queue Interface::
_______ returns the head element of the queue.
{
    ~ offer(element)
    ~ pop()
    = element()
    ~ None of the above
}

// Question.3
::Queue Interface::
_______ is prefered over _______ to avoid exceptions in the program.
{
    = offer(element), add(element)
    ~ add(element), offer(element)
    ~ push(element), add(element)
    ~ None of the above
}

// Question.4
::Queue Interface::
_______ is prefered over _______ to avoid exceptions in the program.
{
    ~ pull(), poll()
    ~ remove(), poll()
    = poll(), remove()
    ~ None of the above
}

// Question.5
::Queue Interface::
_______ is used to get the head element from the queue, unlike the poll element doesn't remove elements from the queue. Returns element or throws an exception if the queue is empty.
{
    ~ peek()
    = element()
    ~ poll()
    ~ get()
}

// Question.6
::Queue Interface::
_______ has some special methods to add and retrieve elements from both the front and rear end.
{
    ~ PriorityQueue
    = ArrayDeque
    ~ List
    ~ Vector
}

// Question.7
::Queue Interface::
_______ is used to retrive an element from the rear end.
{
    = getLast()
    ~ getFirst()
    ~ offerFirst(element)
    ~ offerLast(element)
}

// Question.8
::Queue Interface::
_______ is a queue that stores the elements in general order(ascending) or uses a comparator to sort the elements.
{
    ~ BlockingQueue
    ~ ArrayDeque
    = PriorityQueue
    ~ None of the above
}

// Question.9
::Queue Interface::
_______ is similar to queue but it supports some operations like waiting for the queue to be non-empty to retrieve an element and waiting till the space is available to insert the elements.
{
    = BlockingQueue
    ~ ArrayDeque
    ~ PriorityQueue
    ~ None of the above
}

// Question.10
::Queue Interface::
What is the time complexity of offer(element) method for ArrayDeque?
{
    ~ O(n)
    = O(1)
    ~ O(log n)
    ~ O(2n)
}

// Question.11
::Queue Interface::
What is the time complexity of poll() method for ArrayDeque?
{
    = O(1)
    ~ O(2n)
    ~ O(log n)
    ~ O(n)
}

// Question.12
::Queue Interface::
What is the time complexity of element() method for ArrayDeque?
{
    ~ O(n)
    ~ O(2n)
    ~ O(log n)
    = O(1)
}

// Question.13
::Queue Interface::
What is the time complexity of offer(element) method for a PriorityQueue?
{
    ~ O(n)
    ~ O(2n)
    = O(log n)
    ~ O(1)
}

// Question.14
::Queue Interface::
What is the time complexity of poll() method for a PriorityQueue?
{
    ~ O(n)
    ~ O(2n)
    ~ O(log n)
    = O(1)
}

// Question.15
::Queue Interface::
What is the time complexity of element() method for a PriorityQueue?
{
    = O(1)
    ~ O(n)
    ~ O(2n)
    ~ O(log n)
}

// Question.16
::Queue Interface::
The _______ Interface Inherits the properties of Collection Interface, Queue Interface, and List Interface.
{
    ~ Set
    = Deque
    ~ List
    ~ HashMap
}

// Question.17
::Queue Interface::
There is a movie premiere and people should walk through the red carpet before they are allowed into the movie theatre. people walk on the carpet based on their importance, The order goes like, Produce, Director, lead Actors, supporting actors and the list continues. Which of the following best represents the following scenario?
{
    ~ ArrayDeque
    ~ BlockingQueue
    = PriorityQueue
    ~ Queue
}

// Question.18
::Queue Interface::
Predict the output of the following code snippet.
<pre>
ArrayDeque<Integer> ad = new ArrayDeque<>();
ad.add(1);
System.out.println(ad.remove());
</pre>
{
    = 1
    ~ Compile-time Error
    ~ Run-Time error
    ~ Input Mismatch error
}

// Question.19
::Queue Interface::
Predict the output of the following code snippet.
<pre>
ArrayDeque<Integer> ad = new ArrayDeque<>();
ad.push(4);
System.out.println(ad.pop());
</pre>
{
    = 4
    ~ Compile-time Error
    ~ Run-Time error
    ~ Input Mismatch error
}

