// Question.1
::Collections framework:: 
What is a container or object that combines multiple elements into a single unit and is used to store, retrieve and manipulate data.
{
    =Collection
    ~Abstract
    ~Container framework
    ~Singleton
}

// Question.2 
::Collections framework:: 
Collection framework contains _______ for all the data structures?
{
    ~prohibition
    ~inhibition
    =implementations
    ~interruption
}

// Question.3 
::Collections framework:: 
All the classes under the collection framework implement an _______ interface.
{
    ~comparator
    =iterable
    ~considerable
    ~deliverable
}

// Question.4
::Collections framework:: 
Fill in the code from given choices. 
<pre>
import java.util.*;
public class Main {
    public static void main(String[] args) {
        ArrayList<Integer> al = new ArrayList<>();
        al.add(1);
        al.add(13);
        al.add(2);
        al.add(0);
        //fill here
        {
            System.out.println(i);
        }
    }
}
</pre>
{
    =for(Integer i:al)
    ~for(String i: al)
    ~foreach(int i:al)
    ~foreach(Integer i:al)
}

// Question.5
::Collections framework:: 
Fill in the code from given choices. 
<pre>
import java.util.*;
public class Main {
    public static void main(String[] args) {
        ArrayList<Integer> al = new ArrayList<>();
        al.add(1);
        al.add(13);
        al.add(2);
        al.add(0);
        //Fill here
        while(i.hasNext())
        {
            System.out.println(i.next());
        }
    }
}
</pre>
{
    ~Iterator al = new iterator();
    ~Iterator i = al.iterator(new);
    ~Iterator i = new iterator();
    =Iterator i = al.iterator();
}

// Question.6
::Collections framework:: 
Fill in the code from given choices. 
<pre>
import java.util.*;
public class Main {
    public static void main(String[] args) {
        ArrayList<Integer> al = new ArrayList<>();
        al.add(1);
        al.add(13);
        al.add(2);
        al.add(0);
        al.stream()._______________________);
    }
}
</pre>
{
    ~forEach(e--> System.out.println(e)
    =forEach(e-> System.out.println(e)
    ~forEach(e.System.out.println(e)
    ~forEach(e(System.out.println(e))
}

//Question.7
::Collections framework::
A comparable object is capable of comparing itself with another object and the comparator class must implement the java.util.Comparator interface. {T}

//Question.8
::Collections framework::
The concurrent collection APIs of Java provides a range of classes that are specifically designed to deal with concurrent operations. {T}

// Question.9
::Collections framework::
Using Enumeration, you can traverse the collection and also do any modifications to the collection while traversing it. {F}

// Question.10
::Collections framework::
Which command is used to arrange elements in random order.
{
    ~sort(Collection)
    ~random(Collection)
    =shuffle(Collection)
    ~reverse(Collection)
}

