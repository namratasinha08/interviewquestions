// Question.1
::List Interface::
A _______ is an ordered collection of elements.
{
    ~ HashMap
    ~ Vector
    ~ HashSet
    = List
}

// Question.2
::List Interface::
Which of the following are NOT an operation performed by a list.
{
    ~ Positional access
    ~ Search
    ~ Iteration
    = Truncate
}

// Question.3
::List Interface::
Which of the following classes do NOT implement List interface.
{
    = PriorityQueue
    ~ LinkedList
    ~ Vector
    ~ Stack
}

// Question.4
::List Interface::
_______ is a dynamic array and implements the list interface.
{
    ~ Arraydeque
    = ArrayList
    ~ Vector
    ~ Stack
}

// Question.5
::List Interface::
_______ is used to store the elements in a sequential manner and implements both list and deque interface?
{
    ~ Arraydeque
    ~ Queue
    = LinkedList
    ~ ArrayList
}

// Question.6
::List Interface::
________ method is used to add single element at the end of the list.
{
    = add(element)
    ~ remove(element)
    ~ insert(element)
    ~ new(element)
}

// Question.7
::List Interface::
_______ adds elements at the end of the list and _______ adds elements from a specific position.
{
    = addAll(collection), addAll(int index, collection)
    ~ addAll(int index, collection), addAll(collection)
    ~ addAll(collection), addAll(int index)
    ~ new(int index), new(collection)
}

// Question.8
::List Interface::
_______ method is used to get a single element from the list.
{
    ~ show(int index)
    ~ display(int index)
    = get(int index)
    ~ remove(int index)
}

// Question.9
::List Interface::
_______ is a legacy class so it has some methods which are not part of the collection framework.
{
    ~ Stack
    = Vector
    ~ Queue
    ~ PriorityQueue
}

// Question.10
::List Interface::
_______ follows the Last in First out principle and extends Vector.
{
    = Stack
    ~ Vector
    ~ Queue
    ~ PriorityQueue
}

// Question.11
::List Interface::
Why is ArrayList preferred over a LinkedList?
{
    ~ ArrayList is user-friendly
    ~ ArrayList is easier to manipulate data
    = ArrayList elements can be accessed at a constant time
    ~ None of the above
}

// Question.12
::List Interface::
Which of the following is the non-synchronized version of the vector?
{
    = ArrayList
    ~ LinkedList
    ~ Stack
    ~ ArrayDeque
}

// Question.13
::List Interface::
What is the best case time complexity of add(element) method for ArrayList?
{
    ~ O(n)
    = O(1)
    ~ O(log n)
    ~ O(2n)
}

// Question.14
::List Interface::
What is the complexity of add(index,element) method for ArrayList?
{
    = O(n)
    ~ O(1)
    ~ O(log n)
    ~ O(2n)
}

// Question.15
::List Interface::
What is the time complexity of get(index) method for ArrayList?
{
    ~ O(n)
    = O(1)
    ~ O(log n)
    ~ O(2n)
}

// Question.16
::List Interface::
What is the time complexity of remove() method for ArrayList?
{
    = O(n)
    ~ O(1)
    ~ O(log n)
    ~ O(2n)
}

// Question.17
::List Interface::
What is the time complexity of indexOf(element) method for ArrayList?
{
    ~ O(2n)
    ~ O(1)
    = O(n)
    ~ O(log n)
}

// Question.18
::List Interface::
What is the time complexity of contains(element) method for ArrayList?
{
    = O(n)
    ~ O(1)
    ~ O(log n)
    ~ O(2n)
}

// Question.19
::List Interface::
Dora is going for an adventure and she needs a backpack to carry all her items (more than one copy of the item may exist) and she might buy some items on the way and store it in her backpack. She wants to get items immediately from her backpack when she needs them. So, the backpack should be resizable and elements can be accessed in constant time. which of the following is the best option?
{
    ~ LinkedList
    = ArrayList
    ~ HashSet
    ~ None of the above
}

// Question.20
::List Interface::
Indiana Jones is going for a treasure hunt and he needs a backpack to store the valuable items throughout his journey. If he finds out that an item he stored in the backpack is fake, he takes it and throws it away, and he never takes any item out of his back till the journey ends. Which of the following is the best option?
{
    = LinkedList
    ~ ArrayList
    ~ HashSet
    ~ None of the above
}
