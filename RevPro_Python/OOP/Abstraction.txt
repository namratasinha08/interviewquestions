// Abstraction Questions

#P2
##EASY
###TF
1. State True and False: "Python doesn't have any interface keyword like it has for class."

A.True
B.False

Answer: A

Explanation: In python, there is no concept of interface. So, we can only use the abstract base class that let us define abstract methods inside it and those methods should be implemented by derived classes.

#P2
##EASY
###BC
2. Which of the following is true regarding abstract class in python?

A.Abstract classes can be instantiated.
B.Abstract classes can have only abstract methods.
C.We can create abstract class using abstract keyword.
D.Abstract classes can have both abstract methods and non-abstract methods.

Answer: D

Explanation: In abstract classes, we can create abstract methods along with non-abstract methods.

#P1
##MEDIUM
###BC
3. Predict the output of the following code.

from abc import ABC, abstractmethod
class Abstract(ABC.:
 
    @abstractmethod
    def path(self):
        pass
    
    def show(self):
        print("Reached NY")
        
class Derived(Abstract):
    def path(self):
        print("60 km away from NY")

obj = Derived()
obj.path()


A. Reached NY
B. 60 km away from NY
C. Error
D. Nothing is printed

Answer: B

Explanation: Derived class called its own method path() and hence, statement inside path() method is executed. Hence, we got the output as "60 km away from NY". 

#P1
##MEDIUM
###BC
4. Predict the output of the following code.


from abc import ABC, abstractmethod
class Abstract(ABC.:
 
    @abstractmethod
    def path(self):
        pass
    
    def show(self):
        print("Reached NY")
        
class Derived(Abstract):
    def path(self):
        print("60 km away from NY")

obj = Derived()
obj.show()


A. Reached NY
B. 60 km away from NY
C. Error
D. Nothing is printed

Answer: A

Explanation: Object of Derived class called the show() method of Abstract class and as show() method is a non-abstract method of Abstract class, its inside statement gets executed.


#P1
##MEDIUM
###BC
5. Predict the output of the below code.

from abc import ABC, abstractmethod
class Abstract(ABC.:
 
    @abstractmethod
    def path(self):
        pass
    
    def show(self):
        print("Reached NY")
        
class Derived(Abstract):
    def path(self):
        print("60 km away from NY")

obj = Abstract()
obj.show()


A.Reached NY
B.60 km away from NY
C. Error
D. Nothing is printed

Answer: C

Explanation: After executing the above code, we will get the Error stating that Abstract class cannot be instantiated as it is abstract base class in python.

#P1
##MEDIUM
###BC
6. What is the output of the following code?

from abc import ABC, abstractmethod
class Abstract(ABC.:
 
    @abstractmethod
    def path(self):
        pass
    
    def show(self):
        print("Reached NY")
        
class Derived(Abstract):
    pass

obj = Derived()
obj.path()


A.Reached NY
B.pass
C. Error, because Derived class is an abstract class.
D. Nothing is printed

Answer: C

Explanation: We will get the TypeError: Can't instantiate abstract class Derived with abstract methods path. This is because we have not provided any implementation to path() method of Abstract class in Derived class. Therefore, derived class also becomes abstract class.

#P1
##MEDIUM
###BC
7. What is the output of the following?

from abc import ABC, abstractmethod
class Abstract(ABC.:
 
    @abstractmethod
    def path(self):
        pass
    
    def show(self):
        print("Reached NY")
        
class Derived(Abstract):
    
    def path(self):
        pass

obj = Derived()
obj.path()


A.Reached NY
B.pass
C. Error, because Derived class is an abstract class.
D. Nothing is printed

Answer: D

Explanation: The path() method of Derived class has implemented the path() method of Abstract class by just providing pass statement in the method definition. pass is a null statement in python and so, nothing is printed in the console [output screen].

#P1
##EASY
###BC
8. Which module is required to be imported for creating abstract class in python?

A.ast
B.abc
C. re
D. sys

Answer: B

#P2
##EASY
###TF
9. In Python, to achieve abstraction we can use,

A.interfaces
B.abstract classes 
C. normal classes
D. all of the above

Answer: B

#P1
##EASY
###TF
10. State True and False: "Abstract base class provides a way to declare methods without implementation in python".

A.True
B.False

Answer: A

#P1
##EASY
###TF
11. State True and False: "We can create abstract class by just passing "pass" inside method definition in python". 

A.True
B.False

Answer: B




