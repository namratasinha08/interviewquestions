

#P2
##EASY
####BC
1. Which statement out of the following is best for encapsulation?

A. It gives ability to a child class to access properties from parent class.
B. It has the ability to hide the unwanted complex implementation from the user.
C. It wraps up the data members and member functions of a class in a single unit.
D. It gives different meaning to same function in different classes.

Answer: C

Explanation: Encapsulation is a way of binding all the members of a class together.



#P1
##EASY
####BC
2. Predict the output of the following code.

class Test:
    def __init__(self):
        self.num1 = 5
        self.__num2 = 10
 
    def display(self):
        return self.__num2

obj = Test()
print(obj.num1)

A. 5 is printed
B. 10 is printed
C. Error, because num1 is not retured by display() method.
D. Error, because __num2 is a private data member.

Answer: A

Explanation: num1 is a public variable of Test class. It can be accessed outside the class using objects of that class. 


#P1
##EASY
####BC
3. Predict the output of the following code.

class Test:
    def __init__(self):
        self.num1 = 5
        self.__num2 = 10
 
    def display(self):
        return self.__num2

obj = Test()
print(obj.__num2)

A. 5 is printed
B. 10 is printed
C. Error, because num1 is not retured by display() method.
D. Error, because __num2 is a private data member.

Answer: D

Explanation: As __num2 is private variable of Test class, we cannot access the variable through objects of that class.


#P1
##EASY
####BC
4. Predict the output of the below code.

class Test:
    __num2=30
    def __init__(self):
        self.num1 = 5
        self.__num2 = 10
 
    def getNumber(self):
        print(Test.__num2)
    
    def setNumber(self):
        self.__num2 =20
        
obj = Test()
obj.getNumber()

A. 10
B. 20
C. 30
D. Error

Answer: C

Explanation: Class variable's value is printed through getNumber() method using Class_Name.variable_name. 


#P1
##EASY
####BC
5. What is the output of the following code?

class Test:
    __num2=30
    def __init__(self, __num2):
        self.__num2 = __num2
 
    def getNumber(self):
        print(self.__num2)
    
    def setNumber(self, __num2):
        self.__num2 =__num2
        
obj = Test(10)
obj.setNumber(20)
obj.getNumber()

A. 10
B. 20
C. 30
D. Error

Answer: B

Explanation: The current instance value, that is 20, is printed using self.variable_name when calling getNumber() method.


#P1
##EASY
####BC
6. What is the output of the following code?

class Test:
    __num2=30
    def __init__(self, __num2):
        self.__num2 = __num2
 
    def getNumber(self):
        print(__num2)
    
    def setNumber(self, __num2):
        self.__num2 =__num2
        
obj = Test(10)
obj.setNumber(20)
obj.getNumber()

A. 10
B. 20
C. 30
D. Error

Answer: D

Explanation: In the above code, we will get "NameError: name '_Test__num2' which is not defined". To resolve this error, we have to use either class_name or self before the __num2 variable in print statement, according to our need. For example, self.__num2.


#P2
##EASY
####BC
7. What do we call the Private members of a class that can be accessed through methods of a class?
A. init / del
B. getters / setters
C. iter / eq
D. repr / str

Answer: B

Explanation: The motive of using getters and settersfunctions in a class is to get[return] and set[assign] the private variables of a class.


#P2
##EASY
####TF
8. State True and False: "Private variables of a class cannot be accessed outside the class".
A. True
B. False

Answer: B

Explanation: Using name mangling, we can access the private members of a class. For that, we have to write ObjectName._ClassName__VariableName. For example: obj._Student__name, where obj is object name, Student is a class name and __name is a private variable.


#P1
##EASY
####BC
9. Which of these is a protected data member of a class in python?

class Test:
    def __init__(self):
        __num1 = 0
        self._num2 = 0
        self.__num3__ = 0
        __num4__= 0

A. __num1
B. _num2
C. num3
D. num4

Answer: B

Explanation: Variables with single underscore (_) are the protected variables of a class.


#P1
##EASY
####BC
10. Predict the output of the following code.

class Apple: 
    def __init__(self):
        self.price = 500
        self.__quantity = 5
        
    def display(self):
        print(self.price, self.__quantity)
        
obj = Apple()
obj.display()

A. 500 5
B. 500 Error
C. Error
D. Nothing is printed

Answer: A

Explanation: __quantity is a private variable of a class, and private variables can be printed using class methods.


#P2
##EASY
####TF
11. State True or False: " Private and Protected class variables can be accessed by name mangling".
A. True
B. False

Answer: B

Explanation: Private variables can be accessed by name mangling but protected variables cannot.


#P1
##EASY
####BC
12. Predict the output of the following code.

class Design:
    _shape = "Square"
    def __init__(self):
        self.colour = None
        self._shape = "Rectangle" 
 
    def display(self, s):
        self._shape = s
obj=Design()
print(obj._Design_shape)

A. Square
B. Rectangle
C. Error
D. Nothing is printed

Answer: C

Explanation: In the above code, we will get AttributeError: 'Design' object as no attribute '_Design_shape' because, _shape is a protected member of Design class and we cannot access protected members outside the class using name mangling.


#P1
##EASY
####TF
13. State True and False: "name mangling in python is used to access private variables outside the class."

A. True
B. False

Answer: A


#P1
##EASY
####BC
14. We can achieve encapsulation in python by

A. using abstract base class
B. declaring the data members of a class either as private or protected.
C. overriding the base class method in derived class
D. all of the above


#P1
##EASY
####TF
15. We can achieve encapsulation by declaring the data members of a class either as private or protected.

A. True
B. False

Answer: A










