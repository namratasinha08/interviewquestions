#P1
##EASY
###BC
1.Choose the correct statements about the access modiferes in Java?

i.It limits the accessiblility or visibility of the class, method, variable, and constructor.
ii.There are four access modifiers Default, Public, Private and Protected.
iii.The data members, class or methods which are not declared using any access modifier will be considered as Public. 


A.i and ii
B.i and iii
C.ii and iii
D.i, ii and iii

Answer:A
Explanation:Access Modifiers are used to limit the accessibility or visibility of class, method, variable, and constructor. Default,Public,Private,Protected are the four data modifiers.


#P1
##EASY
###BC

2.If we declare the class as default,then___

A.We can't access the class outside the package and we can't import in another class.
B.We can access the class outside the package but we can't import in another class.
C.We can access the class outside the package and we can impost in another class.
D.We cant declare a class to be default.

Answer:A
Explanation:If we do not specify the access modifier, the default will be the access modifier.When we declare default access modifier, the visibility will be only within the package.If we declare class as default, we can't access the class outside the package and we can't import in another class.

#P1
##EASY
###TF

3.State True or False: If we specify with the public access modifier then the accessibility will be within the package.

A.True
B.False

Answer:B
Explanation:If we specify with public the access modifier, the accessibility will be anywhere within or outside the package.We can import the class from any package when it is declared as public.

#P1
##EASY
###BC

4.Which of the following is the most restrictive access modifier?

A.Public
B.Private
C.Default
D.Protected

Answer:B
Explanation: If we specify with private access modifier to any field,the accessibility will be within the class.It is the most retrictive access modifier.It can't be used for class and interface.

#P1
##EASY
###TF

5.State True or False: We can use private variable outside the class.

A.True
B.False

Answer:B
Explanation:No, we can't access the private variables outside the class.If we want to use the private variable outside the class, we will have to create public methods to access it.In general, we will create getter and setter method to access private variables.

#P1
##EASY
###BC

6.If we specify with protected access modifier then the accessiblility will be___

A.within the same class.
B.within the same package or the subclass in the different package.
C.within or outside the package.
D.within the same package or the non-subclass in the different package.

Answer:B
Explanation:If we specify with protected the access modifier, the accessibility will be within the class and subclasses which are extended from it.

#P2
##EASY
###BC

7.Consider the following statements.

i.If we specify with protected access modifier then the accessibility will be within same package or subclasses different package
ii.If we specify with private access modifier then it can be used with in a same package subclass.

A.Only i
B.Only ii
C.Both i and ii
D.Neither i nor ii

Answer:A
Explanation:Private- The visibility is only within the class,We can use public method to access private variable and private method out side of class. Protected- The visibility is only within the class and subcalsses.We can use public method to access protected variable and proctected variable out side of class and subclass.

#P2
##MEDIUM
###BC

8.Predict the output of the following.
class Employee {
	private String name;
	private String address;
	public Employee(String name, String address) {
		super();
		this.name = name;
		this.address = address;
	}
	
}

public class Main {
	public static void main(String[] args) {
		Employee emp = new Employee("Arnold","Washington");
        System.out.println(emp.name);
	}
}
A.Compilation error: we can't have super() in the constructor
B.Compilation error: we can't access name outside the class Employee since it is declared as private.
C.No error in this code , it will work fine and the output will be Arnold.
D.There will not be any compilation error if we try to print name instead of emp.name.

Answer:B
Explanation:If we declare the data member to be private, it can't be accessed outside the class.

#P2
##MEDIUM
###BC
9.Predict the output.

public class Employee {
	protected String name;
	protected String address;
	public Employee(String name, String address) {
		super();
		this.name = name;
		this.address = address;
	}	
}
package com.example;

import com.example.model.Employee;

public class Main {
	public static void main(String[] args) {
		Employee emp = new Employee("Arnold","Washington");
        System.out.println(emp.name)
	}
}
A.Compilation error: we can't have super() in the constructor
B.Compilation error: we can't access name outside the class Employee since it is declared as protected.
C.No error in this code , it will work fine and the output will be Arnold.
D.There will not be any compilation error if we try to print name instead of emp.name.

Answer:B
Explanation:We can't use protected variable outside the class. If we want to access the variable outside the class, we have to use public method such as getter method from the class.

#P2
##MEDIUM
###BC
10.Predict the output.

class Employee {
	protected String name;
	protected String address;
	public Employee(String name, String address) {
		super();
		this.name = name;
		this.address = address;
	}
	public Employee() {
	}
	public String getName() {
		return name;
	}
	public String getAddress() {
		return address;
	}
}


class Department extends Employee {
	public Department() {
		super();
	}
	public Department(String name, String address) {
		super(name, address);
	}
}
class Main {
	public static void main(String[] args) {
		Employee emp = new Employee("Arnold","Washington");
		Department dep = new Department();
		System.out.println(dep.getName());
	}
}

A.Arnold
B.Compilation Error
C.null
D.None of the above

Answer:C
Explanation:The output of the program is `null`. The object `dep` for `Department` isn't initialized with any value. Only `emp` object for `Employee` class is initialized.The subclass methods can access `default`, `public`, and `protected` fields.Therefore, `dep` object can access the `getName()` method from `Employee` class. If the value for instance variable is not initialized, the default value will be assigned to it.For string, the value is `null`.

#P2
##MEDIUM
###BC

11.Predict the output.

package com.example.model;

public class Employee {
	public String name;
	public String address;
	public Employee(String name, String address) {
		super();
		this.name = name;
		this.address = address;
	}	
}

class Department{
	public String team;
	public String product;
	public Department(String team, String product) {
		super();
		this.team = team;
		this.product = product;
	}
}


import com.example.model.Department;
import com.example.model.Employee;

public class Main {
	public static void main(String[] args) {
		Employee emp = new Employee("Arnold","Washington");
		Department dep = new Department("Action","Terminator");
		System.out.println(emp.name);
		System.out.println(dep.team);
	}
}

A.Arnold
Action
B.Arnold
null
C.null
null
D.Compilation Error

Answer:D
Explanation:The class `Department` is not a public class. We can't import the `default` class.
